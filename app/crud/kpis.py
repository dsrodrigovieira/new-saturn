from sqlalchemy.orm import Session
from app.models.kpis import Kpi
from app.schemas.kpis import KpiBase

def read_one(db: Session, id: int):
    """
    Reads one KPI from the database by its ID.
    """
    return db.query(Kpi).filter(Kpi.id == id).first()

def read_by_titulo(db: Session, titulo: str):
    """
    Reads one KPI from the database by its title.
    """
    return db.query(Kpi).filter(Kpi.titulo == titulo).first()

def read_all(db: Session, skip: int = 0, limit: int = 100):
    """
    Reads all KPIs from the database with pagination.
    """
    return db.query(Kpi).offset(skip).limit(limit).all()

def create(db: Session, kpi: KpiBase):
    """
    Creates a new KPI in the database.
    """
    # Exclude fields that are auto-generated by the database
    db_kpi = Kpi(**kpi.model_dump(exclude={"id", "dt_criacao", "dt_atualizacao"}))
    db.add(db_kpi)
    db.commit()
    db.refresh(db_kpi)
    return db_kpi

def update(db: Session, id: int, kpi: KpiBase):
    """
    Updates an existing KPI in the database.
    """
    db_kpi = db.query(Kpi).filter(Kpi.id == id).first()
    if db_kpi is None:
        return None
    
    update_data = kpi.model_dump(exclude_unset=True)
    for key, value in update_data.items():
        setattr(db_kpi, key, value)
    
    db.commit()
    db.refresh(db_kpi)
    return db_kpi

def delete(db: Session, id: int):
    """
    Deletes a KPI from the database by its ID.
    """
    db_kpi = db.query(Kpi).filter(Kpi.id == id).first()
    if db_kpi is None:
        return None
    
    db.delete(db_kpi)
    db.commit()
    return db_kpi